openapi: '3.0.1'

info:
  title: User
  version: '1.0'
  description: User Management
  
servers:
  - url: http://localhost:8081/api
    description: Local server
    
paths:
  /user:
    post:
      summary: Save User
      operationId: saveUser
      parameters:
      - name: Authorization
        in: header
        description: Token de Autorizacion
        required: true
        schema:
          type: string
          example: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIwY2UzZWY4MC03ZWM3LTQ1MmMtODdmZC0yODhhYTdkM2NhZjIiLCJyb2xlIjoiVVNFUiIsImV4cCI6MTY5OTc0MjYwMCwiaWF0IjoxNjk5NzQyMzAwfQ.cNNUtjaK7WVJouMp7jIkaJOwBlmlW5z60-UW48zLcSrb1PGJ-2lxRrd-niJikD8tHB93FR6FDH8sZYnk7cOiog
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        409:
          description: Conflict for data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth:
    post:
      summary: User authentication
      operationId: authenticate
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
              
components:
  schemas:
    UserRequest:
      type: object
      description: Data element for user
      required:
        - name
        - email
        - password
        - phones
      properties:
        name:
          type: string
        email:
          type: string
          pattern: ^[a-zA-Z0-9]+[\w\-\.]*@[a-zA-Z0-9]+[\w\-]*[\.]cl$
          example: 'aaaaaaa@dominio.cl, jorge.diaz@nisum.cl, jorge_diaz1234@nisum.cl'
          description: Email con el formato <username>@<dominio>.cl
        password:
          type: string
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&\.\-\_])[A-Za-z\d@$!%?&\.\-\_]{8,20}$
          example: 'Jorge1234.'
          description: Al menos una letra mayúscula, una letra minúscula, un número, un carácter especial (@, $, !, %, ?, &, ., -, _), mínimo ocho y máximo 20 caracteres
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneRequest'
    PhoneRequest:
      type: object
      description: Data element for phone
      required:
        - number
        - cityCode
        - countryCode
      properties:
        number:
          type: String
        cityCode:
          type: String
        countryCode:
          type: String
    UserResponse:
      type: object
      description: Data for user response
      required:
        - id
        - created
        - modified
        - lastLogin
        - token
        - isActive
      properties:
        id:
          type: String
        created:
          type: String
        modified:
          type: String
        lastLogin:
          type: String
        token:
          type: String
        isActive:
          type: boolean
    ErrorResponse:
      type: object
      description: Data for error response
      properties:
        message:
          type: string
    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    JwtResponse:
      type: object
      properties:
        jwt:
          type: string